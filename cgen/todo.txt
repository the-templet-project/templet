Plans for future releases:
-- Implementing a DSL for the actor-task model in C ++;
-- Determining the boundaries of an implicit markup; 
-- New tools:
				~/lang/tools/rskel  -- restoring the templet markup using a template file;
				~/lang/tools/macta  -- new meta-processor for the actor-task model;
				~/lang/mactam.hpp   -- DSL for the actor-task model in C++.
				
//  in the mactam.hpp to define
class meta_actor{
public:
	 meta_actor& start();
	 meta_actor& in(const char* port_name,const char* message_type);
	 meta_actor& out(const char* port_name,const char* message_type);
	 meta_actor& task(const char* task_name,const char* task_engine_type,const char* task_type);
	 meta_actor& task(const char* task_name,const char* task_engine_type);
	 //for one task request object & many inbound tasks objects
	 //meta_actor& todo(const char* task_name,const char* task_engine_type,const char* task_type);
	 //meta_actor& todo(const char* task_name,const char* task_engine_type);
};
class meta_engine{
public:
	meta_actor& actor(const char* name);
private:
	void print_temlate(ostream&);
	void print_template_with_acta_dsl(ostream&);
};
//  usage in the code
void meta(meta_engine&e){
	e.actor("A").start().in("in","M").out("out","M").task("tsk","everest","mytask");
}

-----------reskel.exe---------
    ___
   |_>_|   The Temlet Project SDK (http://templet.ssau.ru)
   |_>_|   Utility for restoring a markup by the given template v.0.9.0
  TEMPLET  Copyright 2016-202?, Sergei Vostokin, ?
  
 Usage:  reskel {options}
 
 Options:
 -h -H -- print this screen (it also printed if no options or uncorrect options are set)
 -i -I <file> -- input file
 -o -O <file> -- output file
 -s -S <file> -- template file
 -r -R <file> -- rest of input after restoring

-----------macta.exe---------
    ___
   |_>_|   The Temlet Project SDK (http://templet.ssau.ru)
   |_>_|   Meta-processor for the actor-task model in C ++ v.0.9.0
  TEMPLET  Copyright 2016-202?, Sergei Vostokin, ?
  
 Usage:  macta file [template-file]
  
 
-----------templet.exe-------- 
    ___
   |_>_|   The Temlet Project SDK (http://templet.ssau.ru)
   |_>_|   Templet meta-language processor for C/C++ v.0.9.0
  TEMPLET  Copyright 2016-202?, Sergei Vostokin, ?
  
 Usage:  templet {options} <transform-template-file> 
 
 Input/output:
 -------------
 -i | -I <file> -- input (substitution source), default is stdin
 -o | -O <file> -- output (substitution result), default is stdout
 -m | -M <file> -- the result of the substitution overwrites the input file
 -n | -N        -- null input is used
 -x | -X        -- null ouput is used
 
 Mode options:
 -------------
 -d | -D -- detection of block boundaries at the input (boundaries are marked-up by default)
 -r | -R -- print the remainder of the input (which was not used in the substitution),
            if the remainder is not found, an error occurs
 -f | -F -- if not all parts of the transformation template were used in the substitution,
            an error occurs
 -c | -C -- clear (do not use) mark-up for output
  
 Mark-up format (for C/C++ language):
 ------------------------------------
 /*templet. -- block start signature  <BSS>
 <ID>       -- ID of the marked block <IDB>
 */         -- block start ending     <BSE>
 /*templet*/-- block end signature    <BES>

 Marked-up file format in EBNF:
 ------------------------------
 <marked block> ::= <BSS> <IDB> <BSE> <new line> { <line> <new line> } <BES> <new line>
 <line> ::= character sequence not starting with /*$TT$
 <not marked block> ::= { <line> <new line> }
 <marked file> ::= {<not marked block> <marked block>} <not marked block>

 or

 <BSS> <IDB> <BSE> in the form
 #pragma templet <ID>

 <BES> inthe form
 #pragma templet /<ID>

 Options usage:
 --------------
 1) transformation with marked-up input
      templet -i code.cpp code.tt.cpp -o new.cpp
      cat code.cpp | templet code.tt.cpp -o new.cpp
      templet -m modified.cpp code.tt.cpp 

 2) rest of input in transformation with marked-up input
      templet -r -i code.cpp code.tt.cpp -o rest.cpp
      cat code.cpp | templet -r code.tt.cpp -o rest.cpp

 3) detecting specific block(s) in marked-up input
      templet -f -x -i code.cpp block.cpp

 4) transformation with not marked-up input
      templet -d -i code.cpp code.tt.cpp -o marked.cpp
      cat code.cpp | templet -d code.tt.cpp -o marked.cpp

 5) rest of input in transformation with not marked-up input
      templet -d -r -i code.cpp code.tt.cpp -o rest.cpp
      cat code.cpp | templet -d -r code.tt.cpp -o rest.cpp

 6) converting marked-up to not marked-up format
      templet -n -c marked.cpp -o unmarked.cpp
 
 Use cases for the meta-language processor:
 ------------------------------------------
 1) <tt-new-single>     -- create some *.cpp file with initial mark-up  
 2) <tt-new-pair>       -- create some pair of *.cpp file and corresponding template *.tt.cpp
 3) <tt-check-single>   -- only check *.cpp for consistency, do not transform to the consistent state
 4) <tt-check-pair>     -- check pair of *.cpp and *.tt.cpp for consistency, do not transform to the consistent state
 5) <tt-modify-single>  -- transform *.cpp to the consistent state
 6) <tt-modify-pair>    -- transform *.cpp and *.tt.cpp to the consistent state
 7) <tt-pair-to-single> -- unite *.cpp and *.tt.cpp pair into the single marked-up *.cpp
 8) <tt-single-to-pair> -- split the single marked-up *.cpp into *.cpp and *.tt.cpp pair

 Minimum package of utilities in the state synchronization version:
 ------------------------------------------------------------------
 1) tlang - markup processor for the Templet language
 2) tmake - source code maker
 3) tsync - state synchronization server
 4) tdata - data server
 5) tauth - key generator
 6) tcall - interface from the app to the state synchronization server
 7) tload - interface from the app to the data server
 8) tuser - interface from the external user to the app


 
 
 